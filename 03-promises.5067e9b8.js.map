{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SACpCC,QAAQC,IAAIJ,GAEZ,IAAMK,EAAQJ,SAASC,cAAc,kBAC/BI,EAAOL,SAASC,cAAc,iBAC9BK,EAASN,SAASC,cAAc,mBAWtC,SAASM,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUS,MAAAR,IAEpBG,EAAO,CAAEJ,WAAUS,MAAAR,G,GAEpBA,E,IAlBPV,EAAKmB,iBAAiB,UAsBtB,SAAyBC,GACvBA,EAAGC,iBAKH,IAJA,IAAIC,EAAaC,OAAOlB,EAAMmB,OAC1BC,EAAYF,OAAOjB,EAAKkB,OACxBE,EAAcH,OAAOhB,EAAOiB,OAEvBG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EAGrCnB,EAAcmB,EADdL,GAAcG,GAEXG,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUqB,EAAKD,EAALX,MACjBa,EAAAjC,GAASkC,OAAOC,QACd,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAN,G,IAAGpB,EAAQoB,EAARpB,SAAU2B,EAAKP,EAALX,MAClBa,EAAAjC,GAASkC,OAAOK,QACd,sBAAqCH,OAAfzB,EAAS,QAAYyB,OAANE,EAAM,M,OArCrDpC,EAAKsC,MAAMC,QAAU,OACrBvC,EAAKsC,MAAME,IAAM,OACjBxC,EAAKsC,MAAMG,cAAgB,SAC3BzC,EAAKsC,MAAMI,WAAa,SAExBzC,SAAS0C,KAAKL,MAAMM,gBAAkB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconsole.log(form);\n\nconst delay = document.querySelector('[name=\"delay\"]');\nconst step = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', onPromiseCreate);\n\nform.style.display = 'flex';\nform.style.gap = '40px';\nform.style.flexDirection = 'column';\nform.style.alignItems = 'center';\n\ndocument.body.style.backgroundColor = 'green';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onPromiseCreate(ev) {\n  ev.preventDefault();\n  let delayValue = Number(delay.value);\n  let stepValue = Number(step.value);\n  let amountValue = Number(amount.value);\n\n  for (let i = 1; i <= amountValue; i += 1) {\n    // let promiseDelay = delayValue + stepValue * i;\n    delayValue += stepValue;\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","console","log","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","ev","preventDefault","delayValue","Number","value","stepValue","amountValue","i","then","param","delay2","$parcel$interopDefault","Notify","success","concat","catch","delay3","failure","style","display","gap","flexDirection","alignItems","body","backgroundColor"],"version":3,"file":"03-promises.5067e9b8.js.map"}